// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// xbar_ise_main module generated by `tlgen.py` tool
// all reset signals should be generated from one reset signal to not make any deadlock
//
// Interconnect
// corei
//   -> s1n_6
//     -> sm1_7
//       -> debug_mem
//     -> sm1_8
//       -> ram_main
// cored
//   -> s1n_9
//     -> sm1_7
//       -> debug_mem
//     -> sm1_8
//       -> ram_main
//     -> sm1_10
//       -> gpio
// dm_sba
//   -> s1n_11
//     -> sm1_8
//       -> ram_main
//     -> sm1_10
//       -> gpio

module xbar_ise_main (
  input clk_main_i,
  input rst_main_ni,

  // Host interfaces
  input  tlul_pkg::tl_h2d_t tl_corei_i,
  output tlul_pkg::tl_d2h_t tl_corei_o,
  input  tlul_pkg::tl_h2d_t tl_cored_i,
  output tlul_pkg::tl_d2h_t tl_cored_o,
  input  tlul_pkg::tl_h2d_t tl_dm_sba_i,
  output tlul_pkg::tl_d2h_t tl_dm_sba_o,

  // Device interfaces
  output tlul_pkg::tl_h2d_t tl_ram_main_o,
  input  tlul_pkg::tl_d2h_t tl_ram_main_i,
  output tlul_pkg::tl_h2d_t tl_debug_mem_o,
  input  tlul_pkg::tl_d2h_t tl_debug_mem_i,
  output tlul_pkg::tl_h2d_t tl_gpio_o,
  input  tlul_pkg::tl_d2h_t tl_gpio_i,

  input scanmode_i
);

  import tlul_pkg::*;
  import tl_ise_main_pkg::*;

  // scanmode_i is currently not used, but provisioned for future use
  // this assignment prevents lint warnings
  logic unused_scanmode;
  assign unused_scanmode = scanmode_i;

  tl_h2d_t tl_s1n_6_us_h2d ;
  tl_d2h_t tl_s1n_6_us_d2h ;


  tl_h2d_t tl_s1n_6_ds_h2d [2];
  tl_d2h_t tl_s1n_6_ds_d2h [2];

  // Create steering signal
  logic [1:0] dev_sel_s1n_6;


  tl_h2d_t tl_sm1_7_us_h2d [2];
  tl_d2h_t tl_sm1_7_us_d2h [2];

  tl_h2d_t tl_sm1_7_ds_h2d ;
  tl_d2h_t tl_sm1_7_ds_d2h ;


  tl_h2d_t tl_sm1_8_us_h2d [3];
  tl_d2h_t tl_sm1_8_us_d2h [3];

  tl_h2d_t tl_sm1_8_ds_h2d ;
  tl_d2h_t tl_sm1_8_ds_d2h ;

  tl_h2d_t tl_s1n_9_us_h2d ;
  tl_d2h_t tl_s1n_9_us_d2h ;


  tl_h2d_t tl_s1n_9_ds_h2d [3];
  tl_d2h_t tl_s1n_9_ds_d2h [3];

  // Create steering signal
  logic [1:0] dev_sel_s1n_9;


  tl_h2d_t tl_sm1_10_us_h2d [2];
  tl_d2h_t tl_sm1_10_us_d2h [2];

  tl_h2d_t tl_sm1_10_ds_h2d ;
  tl_d2h_t tl_sm1_10_ds_d2h ;

  tl_h2d_t tl_s1n_11_us_h2d ;
  tl_d2h_t tl_s1n_11_us_d2h ;


  tl_h2d_t tl_s1n_11_ds_h2d [2];
  tl_d2h_t tl_s1n_11_ds_d2h [2];

  // Create steering signal
  logic [1:0] dev_sel_s1n_11;



  assign tl_sm1_7_us_h2d[0] = tl_s1n_6_ds_h2d[0];
  assign tl_s1n_6_ds_d2h[0] = tl_sm1_7_us_d2h[0];

  assign tl_sm1_8_us_h2d[0] = tl_s1n_6_ds_h2d[1];
  assign tl_s1n_6_ds_d2h[1] = tl_sm1_8_us_d2h[0];

  assign tl_sm1_7_us_h2d[1] = tl_s1n_9_ds_h2d[0];
  assign tl_s1n_9_ds_d2h[0] = tl_sm1_7_us_d2h[1];

  assign tl_sm1_8_us_h2d[1] = tl_s1n_9_ds_h2d[1];
  assign tl_s1n_9_ds_d2h[1] = tl_sm1_8_us_d2h[1];

  assign tl_sm1_10_us_h2d[0] = tl_s1n_9_ds_h2d[2];
  assign tl_s1n_9_ds_d2h[2] = tl_sm1_10_us_d2h[0];

  assign tl_sm1_8_us_h2d[2] = tl_s1n_11_ds_h2d[0];
  assign tl_s1n_11_ds_d2h[0] = tl_sm1_8_us_d2h[2];

  assign tl_sm1_10_us_h2d[1] = tl_s1n_11_ds_h2d[1];
  assign tl_s1n_11_ds_d2h[1] = tl_sm1_10_us_d2h[1];

  assign tl_s1n_6_us_h2d = tl_corei_i;
  assign tl_corei_o = tl_s1n_6_us_d2h;

  assign tl_debug_mem_o = tl_sm1_7_ds_h2d;
  assign tl_sm1_7_ds_d2h = tl_debug_mem_i;

  assign tl_ram_main_o = tl_sm1_8_ds_h2d;
  assign tl_sm1_8_ds_d2h = tl_ram_main_i;

  assign tl_s1n_9_us_h2d = tl_cored_i;
  assign tl_cored_o = tl_s1n_9_us_d2h;

  assign tl_gpio_o = tl_sm1_10_ds_h2d;
  assign tl_sm1_10_ds_d2h = tl_gpio_i;

  assign tl_s1n_11_us_h2d = tl_dm_sba_i;
  assign tl_dm_sba_o = tl_s1n_11_us_d2h;

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_6 = 2'd2;
    if ((tl_s1n_6_us_h2d.a_address & ~(ADDR_MASK_DEBUG_MEM)) == ADDR_SPACE_DEBUG_MEM) begin
      dev_sel_s1n_6 = 2'd0;

    end else if ((tl_s1n_6_us_h2d.a_address & ~(ADDR_MASK_RAM_MAIN)) == ADDR_SPACE_RAM_MAIN) begin
      dev_sel_s1n_6 = 2'd1;
end
  end

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_9 = 2'd3;
    if ((tl_s1n_9_us_h2d.a_address & ~(ADDR_MASK_DEBUG_MEM)) == ADDR_SPACE_DEBUG_MEM) begin
      dev_sel_s1n_9 = 2'd0;

    end else if ((tl_s1n_9_us_h2d.a_address & ~(ADDR_MASK_RAM_MAIN)) == ADDR_SPACE_RAM_MAIN) begin
      dev_sel_s1n_9 = 2'd1;

    end else if ((tl_s1n_9_us_h2d.a_address & ~(ADDR_MASK_GPIO)) == ADDR_SPACE_GPIO) begin
      dev_sel_s1n_9 = 2'd2;
end
  end

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_11 = 2'd2;
    if ((tl_s1n_11_us_h2d.a_address & ~(ADDR_MASK_RAM_MAIN)) == ADDR_SPACE_RAM_MAIN) begin
      dev_sel_s1n_11 = 2'd0;

    end else if ((tl_s1n_11_us_h2d.a_address & ~(ADDR_MASK_GPIO)) == ADDR_SPACE_GPIO) begin
      dev_sel_s1n_11 = 2'd1;
end
  end


  // Instantiation phase
  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqDepth (8'h0),
    .DRspDepth (8'h0),
    .N         (2)
  ) u_s1n_6 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_s1n_6_us_h2d),
    .tl_h_o       (tl_s1n_6_us_d2h),
    .tl_d_o       (tl_s1n_6_ds_h2d),
    .tl_d_i       (tl_s1n_6_ds_d2h),
    .dev_select_i (dev_sel_s1n_6)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (2)
  ) u_sm1_7 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_7_us_h2d),
    .tl_h_o       (tl_sm1_7_us_d2h),
    .tl_d_o       (tl_sm1_7_ds_h2d),
    .tl_d_i       (tl_sm1_7_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (3)
  ) u_sm1_8 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_8_us_h2d),
    .tl_h_o       (tl_sm1_8_us_d2h),
    .tl_d_o       (tl_sm1_8_ds_h2d),
    .tl_d_i       (tl_sm1_8_ds_d2h)
  );
  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqDepth (12'h0),
    .DRspDepth (12'h0),
    .N         (3)
  ) u_s1n_9 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_s1n_9_us_h2d),
    .tl_h_o       (tl_s1n_9_us_d2h),
    .tl_d_o       (tl_s1n_9_ds_h2d),
    .tl_d_i       (tl_s1n_9_ds_d2h),
    .dev_select_i (dev_sel_s1n_9)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (2)
  ) u_sm1_10 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_10_us_h2d),
    .tl_h_o       (tl_sm1_10_us_d2h),
    .tl_d_o       (tl_sm1_10_ds_h2d),
    .tl_d_i       (tl_sm1_10_ds_d2h)
  );
  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqDepth (8'h0),
    .DRspDepth (8'h0),
    .N         (2)
  ) u_s1n_11 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_s1n_11_us_h2d),
    .tl_h_o       (tl_s1n_11_us_d2h),
    .tl_d_o       (tl_s1n_11_ds_h2d),
    .tl_d_i       (tl_s1n_11_ds_d2h),
    .dev_select_i (dev_sel_s1n_11)
  );

endmodule
